#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#
import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 500
TIMEOUT = 60
SEQUENCE = 0
PACKET = {}
SENT = {}

# get the host and its port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":") + 1:])
dest = (UDP_IP, UDP_PORT)

# socket set up
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet():
    global SEQUENCE
    data = sys.stdin.read(DATA_SIZE)
    if len(data) > 0:
        seq = {"sequence": SEQUENCE, "data": data, "ack": False, "eof": False, "timestamp": time.time()}
        msg = json.dumps(seq)
        SEQUENCE += len(data)

        if sock.sendto(msg, dest) < len(msg):
            log("[error] unable to fully send packet")
        else:
            log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
            PACKET[SEQUENCE] = seq
        return True
    else:
        return False



# Send first packet
send_next_packet()

# Now read in data, send packets
while True:
    log("ABOUT TO SLEEP")
    s = select.select([sock], [], [], 5)
    if s[0]:
        recv = sock.recvfrom(MSG_SIZE)
        if recv:
            (data, addr) = recv

            try:
                decoded = json.loads(data)

                #when encounter an ack
                if decoded['ack'] is not None:
                    log("[recv ack] " + str(decoded['ack']))

                    if not decoded['ack'] in SENT:
                        SENT[decoded['ack']] = PACKET.pop(decoded['ack'])

            except (ValueError, KeyError, TypeError):
                log("[recv corrupt packet]")
        else:
            log("[error] timeout")
            sys.exit(-1)

    #Check the packet. If packet is not empty, send again. If it is empty, exit.
    PackLen = len(PACKET)
    if (not send_next_packet()) and PackLen == 0:
        log("No more packets, exiting")
        for i in range(20):
            sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
        sys.exit(0)
    if PackLen is not 0:
        log("Resending packets")
        for packet in PACKET:
            p = PACKET[packet]
            msg = json.dumps(p)
            if sock.sendto(msg, dest) < len(msg):
                log("[error] unable to fully send packet")
            else:
                log("[sending] " + str(packet))
                PACKET[packet] = p
