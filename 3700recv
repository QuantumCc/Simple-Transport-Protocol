#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import datetime
import json


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 10
PACKET = {}

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

# Now listen for packets
while True:
    result = sock.recvfrom(MSG_SIZE)

    # If nothing is ready, we hit the timeout
    if result:
        (data, addr) = result

        try:
            decoded = json.loads(data)

            # If the EOF flag is set, exit
            if (decoded['eof']):
                log("[completed]")
                msg = json.dumps({"eof": True})
                log("ABOUT TO SEND " + msg)
                if sock.sendto(msg, addr) < len(msg):
                    log("[error] error sending all the packets")
                sock.close()
                sys.exit(0)

            # If there is data, we accept it and print it out
            if (decoded['data']):
                seq = decoded['sequence']
                if seq not in PACKET:
                    PACKET[seq] = decoded['data']
                    log("[recv data] " + str(decoded['sequence']) + " (" + str(
                        len(decoded['data'])) + ") ACCEPTED (in-order)")
                    sys.stdout.write(decoded['data'])

                # Send back an ack to the sender
                msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})

            log("ABOUT TO SEND " + msg)

            if sock.sendto(msg, addr) < len(msg):
                log("[error] unable to fully send packet")

        except (ValueError, KeyError, TypeError) as e:
            log("[recv corrupt packet]")
            raise e

    else:
        log("[error] timeout")
        sys.exit(-1)




