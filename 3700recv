#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#
import sys
import socket
import time
import datetime
import json

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 60
PACKET = {}
SEQUENCE = 0

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

# Now listen for packets
while True:
    result = sock.recvfrom(MSG_SIZE)
    # If nothing is ready, we hit the timeout
    if result:
      (data, addr) = result
      try:
        decoded = json.loads(data)

        # If the EOF flag is set, exit
        if (decoded['eof']):
            for key in sorted(PACKET.keys()):
                sys.stdout.write(PACKET[key]['data'])
            log("[completed]")
            sys.exit(0)

        # If there is data, we accept it and print it out
        if decoded['data']:
          seq = decoded['sequence']
          log("[recv data] " + str(seq) + " (" + str(len(decoded['data'])) + ") ACCEPTED (in-order)")

          if seq not in PACKET:
            PACKET[seq] = decoded

          if seq == SEQUENCE:
              SEQUENCE += len(decoded['data'])
              PACKET[seq] = decoded

          # Send back an ack to the sender
          msg = json.dumps({"ack": seq + len(decoded['data']), 'timestamp': time.time(), 'eof': False})

        log("about to send " + msg)

        if sock.sendto(msg, addr) < len(msg):
          log("[error] unable to fully send packet")

      except (ValueError, KeyError, TypeError) as e:
        log("[recv corrupt packet]")
        raise e
    else:
      log("[error] timeout")
      sys.exit(-1)




